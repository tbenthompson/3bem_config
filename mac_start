# This rather complex command creates a new user with the permissions of 
# the current host inside the docker image and then starts a bash shell on
# the image. 
# This allows the creation of files within the docker container to have
# the same group and owner as the user who started the docker container.
# The command also enables X11 forwarding from the host to the docker 
# container.
# This version is for Mac OS X and handles the details of boot2docker
# created by Ben Thompson
echo "Loading boot2docker VM."
boot2docker init &> /dev/null
boot2docker up &> /dev/null
$(boot2docker shellinit)

if [[ -n $(docker ps|grep 3bem-dev|cut -f1 -d" ") ]]; then
    echo "Container already running."
else
    echo "Starting container."
    CURGROUP=$(boot2docker ssh "id -g \$USER")
    CURUSERID=$(boot2docker ssh "id -u \$USER")
    docker run --privileged=true -d \
        -v $(pwd)/config:/home/3bem/config \
        -v $(pwd)/devlib:/home/3bem/devlib \
        -v $(pwd)/stablelib:/home/3bem/stablelib \
        -v $(pwd)/elastic:/home/3bem/elastic \
        -P 3bem-dev sh -c "\
    getent group $CURGROUP || addgroup --gid=$CURGROUP active_group && \
    adduser --disabled-password --gecos '' --ingroup=\$(getent group $CURGROUP | cut -d: -f1) --uid=$CURUSERID active_user && \
    echo active_user:password | chpasswd && \
    adduser active_user sudo && \
    echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && \
    cp ~/.bashrc /home/active_user && \
    mkdir /home/active_user/.ssh && \
    cat /id_rsa.pub >> /home/active_user/.ssh/authorized_keys && \
    /usr/sbin/sshd -D"
fi


echo "Connecting to docker container."
CONTAINER_ID=$(docker ps|grep 3bem-dev|cut -f1 -d" "| sed -n 1p)
PORT=$(docker port $CONTAINER_ID 22 | cut -d: -f2)
DIR="$( cd "$( dirname "$0" )" && pwd )"
ssh -Y -oStrictHostKeyChecking=no -i $DIR/id_rsa  -p $PORT active_user@$(boot2docker ip 2> /dev/null)
